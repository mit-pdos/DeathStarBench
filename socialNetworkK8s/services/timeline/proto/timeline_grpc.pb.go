// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: services/timeline/proto/timeline.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Timeline_WriteTimeline_FullMethodName = "/timeline.Timeline/WriteTimeline"
	Timeline_ReadTimeline_FullMethodName  = "/timeline.Timeline/ReadTimeline"
)

// TimelineClient is the client API for Timeline service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TimelineClient interface {
	WriteTimeline(ctx context.Context, in *WriteTimelineRequest, opts ...grpc.CallOption) (*WriteTimelineResponse, error)
	ReadTimeline(ctx context.Context, in *ReadTimelineRequest, opts ...grpc.CallOption) (*ReadTimelineResponse, error)
}

type timelineClient struct {
	cc grpc.ClientConnInterface
}

func NewTimelineClient(cc grpc.ClientConnInterface) TimelineClient {
	return &timelineClient{cc}
}

func (c *timelineClient) WriteTimeline(ctx context.Context, in *WriteTimelineRequest, opts ...grpc.CallOption) (*WriteTimelineResponse, error) {
	out := new(WriteTimelineResponse)
	err := c.cc.Invoke(ctx, Timeline_WriteTimeline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timelineClient) ReadTimeline(ctx context.Context, in *ReadTimelineRequest, opts ...grpc.CallOption) (*ReadTimelineResponse, error) {
	out := new(ReadTimelineResponse)
	err := c.cc.Invoke(ctx, Timeline_ReadTimeline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TimelineServer is the server API for Timeline service.
// All implementations must embed UnimplementedTimelineServer
// for forward compatibility
type TimelineServer interface {
	WriteTimeline(context.Context, *WriteTimelineRequest) (*WriteTimelineResponse, error)
	ReadTimeline(context.Context, *ReadTimelineRequest) (*ReadTimelineResponse, error)
	mustEmbedUnimplementedTimelineServer()
}

// UnimplementedTimelineServer must be embedded to have forward compatible implementations.
type UnimplementedTimelineServer struct {
}

func (UnimplementedTimelineServer) WriteTimeline(context.Context, *WriteTimelineRequest) (*WriteTimelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteTimeline not implemented")
}
func (UnimplementedTimelineServer) ReadTimeline(context.Context, *ReadTimelineRequest) (*ReadTimelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadTimeline not implemented")
}
func (UnimplementedTimelineServer) mustEmbedUnimplementedTimelineServer() {}

// UnsafeTimelineServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TimelineServer will
// result in compilation errors.
type UnsafeTimelineServer interface {
	mustEmbedUnimplementedTimelineServer()
}

func RegisterTimelineServer(s grpc.ServiceRegistrar, srv TimelineServer) {
	s.RegisterService(&Timeline_ServiceDesc, srv)
}

func _Timeline_WriteTimeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteTimelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimelineServer).WriteTimeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Timeline_WriteTimeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimelineServer).WriteTimeline(ctx, req.(*WriteTimelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Timeline_ReadTimeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadTimelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimelineServer).ReadTimeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Timeline_ReadTimeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimelineServer).ReadTimeline(ctx, req.(*ReadTimelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Timeline_ServiceDesc is the grpc.ServiceDesc for Timeline service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Timeline_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "timeline.Timeline",
	HandlerType: (*TimelineServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WriteTimeline",
			Handler:    _Timeline_WriteTimeline_Handler,
		},
		{
			MethodName: "ReadTimeline",
			Handler:    _Timeline_ReadTimeline_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/timeline/proto/timeline.proto",
}
